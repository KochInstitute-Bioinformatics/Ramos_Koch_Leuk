#goi <- c("Jak2","Stat1","Ifngr1","H2-T23","Cd19")
goi <- c("Cd19")
# GOI
for (i in cw.geneLevel.FCs.columns){
sorted_df <- cw.geneLevel.FCs %>% dplyr::select(all_of(i),id) %>% arrange(get(i))
sorted_df$rank <- c(1:nrow(sorted_df))
colnames(sorted_df) <- c("LFC","gene","rank")
sorted_df <- sorted_df %>% drop_na(LFC)
sorted_df <- sorted_df %>% mutate(top = if_else(rank <= 4 | rank >= max(rank) - 5, sorted_df$gene, ""))
sorted_df <- sorted_df %>% mutate(color = if_else(sorted_df$gene %in% goi, "hits", "all"))
sorted_df <- sorted_df %>% mutate(highlight = if_else(sorted_df$gene %in% goi, sorted_df$gene, ""))
sorted_df <- sorted_df %>% arrange(color)
titleText <- str_replace(i, ".Score", "")
assign(paste0(i,".GOIplot"),ggplot(sorted_df, aes(x=rank, y=LFC)) + geom_point(aes(size=abs(LFC), color=color)) +
scale_color_manual(values = c("grey50", "firebrick4")) +
# switching label = between highlight and top will switch which genes are labeled
#geom_text_repel(data = sorted_df, aes(x=rank, y=LFC, label = highlight),
#force = 13, max.overlaps = 50000, size=5) +
theme_bw() + geom_hline(yintercept=0, color="grey50") +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.position="none") +
theme(axis.text=element_text(size=10),axis.text.x = element_text(angle = 45,vjust = 0.5),
plot.title = element_text(size = 18)) +
ggtitle(titleText) +
scale_y_continuous(breaks=seq(-6,6,2), limits=c(-6,6)))
}
fig2h.mh1.rev <- ggarrange(SP.10m.Score.GOIplot,BM.15m.Score.GOIplot,BM.10m.Score.GOIplot,ncol=3, nrow=1)
fig2h.mh1.rev
pdf('fig2h_mh1.rev.pdf',width=8, height=5)
fig2h.mh1.rev
dev.off()
cw.geneLevel.FCs.columns <- colnames(cw.geneLevel.FCs[-1])
#goi <- c("Jak2","Stat1","Ifngr1","H2-T23","Cd19")
goi <- c("Cd19")
# bottom 10
for (i in cw.geneLevel.FCs.columns){
sorted_df <- cw.geneLevel.FCs %>% dplyr::select(all_of(i),id) %>% arrange(get(i))
sorted_df$rank <- c(1:nrow(sorted_df))
colnames(sorted_df) <- c("LFC","gene","rank")
sorted_df <- sorted_df %>% drop_na(LFC)
sorted_df <- sorted_df %>% mutate(top = if_else(rank <= 10, sorted_df$gene, ""))
sorted_df <- sorted_df %>% mutate(color = if_else(rank <= 10 , "hits", "all"))
sorted_df <- sorted_df %>% mutate(highlight = if_else(sorted_df$gene %in% goi, sorted_df$gene, ""))
sorted_df <- sorted_df %>% arrange(color)
titleText <- str_replace(i, ".Score", "")
assign(paste0(i,".TOPplot"),ggplot(sorted_df, aes(x=rank, y=LFC)) + geom_point(aes(size=abs(LFC), color=color)) +
scale_color_manual(values = c("grey50", "firebrick4")) +
# switching label = between highlight and top will switch which genes are labeled
geom_text_repel(data = sorted_df, aes(x=rank, y=LFC, label = top,),
force = 20, max.overlaps = 50000, size=4) +
theme_bw() + geom_hline(yintercept=0, color="grey50") +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.position="none") +
theme(axis.text=element_text(size=12),axis.text.x = element_text(angle = 45,vjust = 0.5),
plot.title = element_text(size = 18)) +
ggtitle(titleText) +
scale_y_continuous(breaks=seq(-6,6,2), limits=c(-6,6)))
}
fig2h.mh2 <- ggarrange(SP.10m.Score.TOPplot,BM.15m.Score.TOPplot,BM.10m.Score.TOPplot,ncol=3, nrow=1)
fig2h.mh2
pdf('fig2h_mh2.pdf',width=8, height=5)
fig2h.mh2
dev.off()
cw.geneLevel.FCs.columns <- colnames(cw.geneLevel.FCs[-1])
#goi <- c("Jak2","Stat1","Ifngr1","H2-T23","Cd19")
goi <- c("Cd19")
# bottom 10
for (i in cw.geneLevel.FCs.columns){
sorted_df <- cw.geneLevel.FCs %>% dplyr::select(all_of(i),id) %>% arrange(get(i))
sorted_df$rank <- c(1:nrow(sorted_df))
colnames(sorted_df) <- c("LFC","gene","rank")
sorted_df <- sorted_df %>% drop_na(LFC)
sorted_df <- sorted_df %>% mutate(top = if_else(rank <= 10, sorted_df$gene, ""))
sorted_df <- sorted_df %>% mutate(color = if_else(rank <= 10 , "hits", "all"))
sorted_df <- sorted_df %>% mutate(highlight = if_else(sorted_df$gene %in% goi, sorted_df$gene, ""))
sorted_df <- sorted_df %>% arrange(color)
titleText <- str_replace(i, ".Score", "")
assign(paste0(i,".TOPplot"),ggplot(sorted_df, aes(x=rank, y=LFC)) + geom_point(aes(size=abs(LFC), color=color)) +
scale_color_manual(values = c("grey50", "firebrick4")) +
# switching label = between highlight and top will switch which genes are labeled
#geom_text_repel(data = sorted_df, aes(x=rank, y=LFC, label = top,),
#force = 20, max.overlaps = 50000, size=4) +
theme_bw() + geom_hline(yintercept=0, color="grey50") +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.position="none") +
theme(axis.text=element_text(size=12),axis.text.x = element_text(angle = 45,vjust = 0.5),
plot.title = element_text(size = 18)) +
ggtitle(titleText) +
scale_y_continuous(breaks=seq(-6,6,2), limits=c(-6,6)))
}
BM_cd19.10m_v_egfr.15m.toMerge <- BM_cd19.10m_v_egfr.15m.gdata %>% dplyr::select(id,Score,FDR) %>% column_to_rownames(var = "id")
colnames(BM_cd19.10m_v_egfr.15m.toMerge) <- paste0("BM_cd19.10m_v_egfr.15m.",colnames(BM_cd19.10m_v_egfr.15m.toMerge))
BM_cd19.10m_v_egfr.15m.toMerge <- rownames_to_column(BM_cd19.10m_v_egfr.15m.toMerge, var = "gene")
BM_cd19.15m_v_egfr.15m.toMerge <- BM_cd19.15m_v_egfr.15m.gdata %>% dplyr::select(id,Score,FDR) %>% column_to_rownames(var = "id")
colnames(BM_cd19.15m_v_egfr.15m.toMerge) <- paste0("BM_cd19.15m_v_egfr.15m.",colnames(BM_cd19.15m_v_egfr.15m.toMerge))
BM_cd19.15m_v_egfr.15m.toMerge <- rownames_to_column(BM_cd19.15m_v_egfr.15m.toMerge, var = "gene")
cd19_1to10_v_egfr_1to10.toMerge <- cd19_1to10_v_egfr_1to10.gdata %>% dplyr::select(id,Score,FDR) %>% column_to_rownames(var = "id")
colnames(cd19_1to10_v_egfr_1to10.toMerge) <- paste0("cd19_1to10_v_egfr_1to10.",colnames(cd19_1to10_v_egfr_1to10.toMerge))
cd19_1to10_v_egfr_1to10.toMerge <- rownames_to_column(cd19_1to10_v_egfr_1to10.toMerge, var = "gene")
cd19_1to2_v_egfr_1to2.toMerge <- cd19_1to2_v_egfr_1to2.gdata %>% dplyr::select(id,Score,FDR) %>% column_to_rownames(var = "id")
colnames(cd19_1to2_v_egfr_1to2.toMerge) <- paste0("cd19_1to2_v_egfr_1to2.",colnames(cd19_1to2_v_egfr_1to2.toMerge))
cd19_1to2_v_egfr_1to2.toMerge <- rownames_to_column(cd19_1to2_v_egfr_1to2.toMerge, var = "gene")
SP_cd19.10m_v_egfr.15m.toMerge <- SP_cd19.10m_v_egfr.15m.gdata %>% dplyr::select(id,Score,FDR) %>% column_to_rownames(var = "id")
colnames(SP_cd19.10m_v_egfr.15m.toMerge) <- paste0("SP_cd19.10m_v_egfr.15m.",colnames(SP_cd19.10m_v_egfr.15m.toMerge))
SP_cd19.10m_v_egfr.15m.toMerge <- rownames_to_column(SP_cd19.10m_v_egfr.15m.toMerge, var = "gene")
SP_cd19.15m_v_egfr.15m.toMerge <- SP_cd19.15m_v_egfr.15m.gdata %>% dplyr::select(id,Score,FDR) %>% column_to_rownames(var = "id")
colnames(SP_cd19.15m_v_egfr.15m.toMerge) <- paste0("SP_cd19.15m_v_egfr.15m.",colnames(SP_cd19.15m_v_egfr.15m.toMerge))
SP_cd19.15m_v_egfr.15m.toMerge <- rownames_to_column(SP_cd19.15m_v_egfr.15m.toMerge, var = "gene")
validation.geneLevel <- left_join(cd19_1to10_v_egfr_1to10.toMerge, cd19_1to2_v_egfr_1to2.toMerge, by = "gene") %>%
left_join(BM_cd19.10m_v_egfr.15m.toMerge, by = "gene") %>%
left_join(BM_cd19.15m_v_egfr.15m.toMerge, by = "gene") %>%
left_join(SP_cd19.10m_v_egfr.15m.toMerge, by = "gene") %>%
left_join(SP_cd19.15m_v_egfr.15m.toMerge, by = "gene")
validation.comparisons <- validation.geneLevel %>% dplyr::select(ends_with("Score")) %>% colnames() %>% str_replace(".Score","")
goi <- c("Jak1","Jak2","Stat1","Ifngr1","Ifngr2","H2-T23","Cd19")
biocarta.IFNG <- c("Jak1","Jak2","Stat1","Ifngr1","Ifngr2","Ifng")
for (i in validation.comparisons){
vol_df <- validation.geneLevel %>% dplyr::select(paste0(i,".Score"),paste0(i,".FDR"),gene)
colnames(vol_df) <- c("LFC","FDR","gene")
vol_df <- vol_df %>% mutate(BIOCARTA_IFNG_PATHWAY = if_else(gene %in% biocarta.IFNG, "Yes", "No"))
bottom5 <- vol_df %>% filter(FDR <= 0.1) %>% slice_min(LFC,n=5) %>% dplyr::select(gene)
top5 <- vol_df %>% filter(FDR <= 0.1) %>% slice_max(LFC,n=5) %>% dplyr::select(gene)
topLabels <- rbind(bottom5,top5)
#vol_df <- vol_df %>% mutate(toLabel = if_else(abs(LFC) >= 0.8 & -log10(FDR) >= 2, vol_df$gene, ""))
#vol_df <- vol_df %>% mutate(toLabel = -log10(FDR) >= 1.3, vol_df$gene, "")
#vol_df <- vol_df %>% mutate(toLabel = if_else(abs(LFC) >= 0.8 & -log10(FDR) >= 2, vol_df$gene, ""))
#vol_df <- vol_df %>% mutate(toLabel = if_else(BIOCARTA_IFNG_PATHWAY=="Yes", vol_df$gene, "")) %>% arrange(!is.na(toLabel),toLabel)
#vol_df <- vol_df %>% mutate(toLabel = if_else(gene %in% goi, vol_df$gene, "")) %>% arrange(!is.na(toLabel),toLabel)
vol_df <- vol_df %>% mutate(toLabel = if_else(gene %in% topLabels$gene, vol_df$gene, "")) %>% arrange(!is.na(toLabel),toLabel)
assign(paste0(i,".volcano"),ggplot(vol_df, aes(x=-log10(FDR), y=LFC)) +
geom_point(aes(color=BIOCARTA_IFNG_PATHWAY)) +
scale_color_manual(values = c("grey70", "red")) +
geom_label_repel(data = vol_df, aes(x=-log10(FDR), y=LFC, label=toLabel),
max.overlaps = 50000, size = 3, box.padding = unit(0.5, "lines")) +
theme_bw() + geom_hline(yintercept=0, color="blue") +
theme(panel.border = element_blank(),panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), legend.position="none") +
scale_y_continuous(breaks=seq(-6,6,1), limits=c(-6,6)) +
#facet_wrap(~ Pool) +
ggtitle(i))
}
assembled_volcano_plots <- ggarrange(BM_cd19.10m_v_egfr.15m.volcano,BM_cd19.15m_v_egfr.15m.volcano,
SP_cd19.10m_v_egfr.15m.volcano,SP_cd19.15m_v_egfr.15m.volcano,
cd19_1to10_v_egfr_1to10.volcano,cd19_1to2_v_egfr_1to2.volcano,
ncol=2, nrow=3)
assembled_volcano_plots
#pdf('assembled_volcano_plots.pdf',width=12, height=12)
#assembled_volcano_plots
#dev.off()
FDR.threshold <- 0.1
Score.threshold <- 1
SP_cd19.10m_v_egfr.15m.enrich <- SP_cd19.10m_v_egfr.15m.gdata %>% filter(Score >= Score.threshold & FDR <= FDR.threshold) %>% dplyr::select(c("id"))
SP_cd19.15m_v_egfr.15m.enrich <- SP_cd19.15m_v_egfr.15m.gdata %>% filter(Score >= Score.threshold & FDR <= FDR.threshold) %>% dplyr::select(c("id"))
BM_cd19.10m_v_egfr.15m.enrich <- BM_cd19.10m_v_egfr.15m.gdata %>% filter(Score >= Score.threshold & FDR <= FDR.threshold) %>% dplyr::select(c("id"))
BM_cd19.15m_v_egfr.15m.enrich <- BM_cd19.15m_v_egfr.15m.gdata %>% filter(Score >= Score.threshold & FDR <= FDR.threshold) %>% dplyr::select(c("id"))
cd19_1to2_v_egfr_1to2.enrich <- cd19_1to2_v_egfr_1to2.gdata %>% filter(Score >= Score.threshold & FDR <= FDR.threshold) %>% dplyr::select(c("id"))
cd19_1to10_v_egfr_1to10.enrich <- cd19_1to10_v_egfr_1to10.gdata %>% filter(Score >= Score.threshold & FDR <= FDR.threshold) %>% dplyr::select(c("id"))
SP_cd19.10m_v_egfr.15m.deplete <- SP_cd19.10m_v_egfr.15m.gdata %>% filter(Score <= -Score.threshold & FDR <= FDR.threshold) %>% dplyr::select(c("id"))
SP_cd19.15m_v_egfr.15m.deplete <- SP_cd19.15m_v_egfr.15m.gdata %>% filter(Score <= -Score.threshold & FDR <= FDR.threshold) %>% dplyr::select(c("id"))
BM_cd19.10m_v_egfr.15m.deplete <- BM_cd19.10m_v_egfr.15m.gdata %>% filter(Score <= -Score.threshold & FDR <= FDR.threshold) %>% dplyr::select(c("id"))
BM_cd19.15m_v_egfr.15m.deplete <- BM_cd19.15m_v_egfr.15m.gdata %>% filter(Score <= -Score.threshold & FDR <= FDR.threshold) %>% dplyr::select(c("id"))
cd19_1to2_v_egfr_1to2.deplete <- cd19_1to2_v_egfr_1to2.gdata %>% filter(Score <= -Score.threshold & FDR <= FDR.threshold) %>% dplyr::select(c("id"))
cd19_1to10_v_egfr_1to10.deplete <- cd19_1to10_v_egfr_1to10.gdata %>% filter(Score <= -Score.threshold & FDR <= FDR.threshold) %>% dplyr::select(c("id"))
vivo.enrich <- rbind(SP_cd19.10m_v_egfr.15m.enrich,SP_cd19.15m_v_egfr.15m.enrich,BM_cd19.10m_v_egfr.15m.enrich,BM_cd19.15m_v_egfr.15m.enrich)
vivo.deplete <- rbind(SP_cd19.10m_v_egfr.15m.deplete,SP_cd19.15m_v_egfr.15m.deplete,BM_cd19.10m_v_egfr.15m.deplete,BM_cd19.15m_v_egfr.15m.deplete)
vitro.enrich <- rbind(cd19_1to2_v_egfr_1to2.enrich,cd19_1to10_v_egfr_1to10.enrich)
vitro.deplete <- rbind(cd19_1to2_v_egfr_1to2.deplete,cd19_1to10_v_egfr_1to10.deplete)
vivo.enrich.unique <- unique(vivo.enrich$id)
vivo.deplete.unique <- unique(vivo.deplete$id)
vitro.enrich.unique <- unique(vitro.enrich$id)
vitro.deplete.unique <- unique(vitro.deplete$id)
deplete.overlap <- calculate.overlap(
x = list(
"Vitro" = vitro.deplete.unique,
"Vivo" = vivo.deplete.unique
)
)
deplete.venn.plot <- draw.pairwise.venn(length(deplete.overlap$a1), length(deplete.overlap$a2),length(deplete.overlap$a3),
category = c("vitro.dep", "vivo.dep"),
fill = c("grey50", "grey50"),
rotation.degree = 180,
lty = "blank"
)
grid.draw(deplete.venn.plot)
grid.newpage()
#pdf(file="deplete_v2.pdf",width=6, height=6)
#grid.draw(deplete.venn.plot)
#dev.off()
####################
enrich.overlap <- calculate.overlap(
x = list(
"Vitro" = vitro.enrich.unique,
"Vivo" = vivo.enrich.unique
)
)
enrich.venn.plot <- draw.pairwise.venn(length(enrich.overlap$a2), length(enrich.overlap$a1), length(enrich.overlap$a3),
category = c("vitro.en", "vivo.en"),
fill = c("grey50", "grey50"),
rotation.degree = 180,
lty = "blank"
)
grid.draw(enrich.venn.plot)
grid.newpage()
#pdf(file="enrich_v2.pdf",width=6, height=6)
#grid.draw(enrich.venn.plot)
#dev.off()
for (i in ls(pattern="m.deplete")){
print(i)
print((get(i)))
}
#goiToPlot <- as.data.frame(c("Ifngr1","Jak2","Stat1","H2-T23","Cd19"))
#goiToPlot <- as.data.frame(c('Gpr161',,'Padi6',,'Cd19'))
goiToPlot <- as.data.frame(c('Pak2','Capzb','Gm9564','Ptpn2','Pbld2','Sephs1','Vmn1r204','Padi6'))
colnames(goiToPlot) <- 'id'
p1 < read.delim("../fromBroad/Plate1/counts-JD_GPP3297-Ramos_20220312_1.txt")
p1 <- read.delim("../fromBroad/Plate1/counts-JD_GPP3297-Ramos_20220312_1.txt")
p2 <- read.delim("../fromBroad/Plate2/counts-JD_GPP3298-Ramos_20220312_2.txt")
head(p1)
head(p2)
head(all.counts)
colnames(p1)
colnames(p2)
colnames(all.counts)
p2.select <- p2 %>% dplyr::select(c(-Construct.IDs,-Unlabeled.Sample.Barcodes))
p2.select <- p2 %>% select(c(-Construct.IDs,-Unlabeled.Sample.Barcodes))
p2.select <- p2 %>% dplyr::select(c(-Construct.IDs,-Unlabeled.Sample.Barcodes))
colnames(p2.select)
p1.p2 <- merge(p1,p2.select,by.x="Construct.Barcode",by.y="Construct.Barcode", all=TRUE)
colnames(p1.p2)
colnames(all.counts)
all.counts <- read.xlsx("stockCounts.xlsx")
colnames(all.counts)
colnames(p1.p2)
dim(all.counts)
dim(p1.p2)
p1.p2.b <- dplyr::rename("sgRNA"="Construct.Barcode","Gene"="Construct.IDs")
p1.p2.b <- dplyr::rename(sgRNA=Construct.Barcode,Gene=Construct.IDs)
p1.p2.b <- p1.p2 %>% dplyr::rename(sgRNA=Construct.Barcode,Gene=Construct.IDs)
colnames(p1.p2)
colnames(p1.p2.b)
colnames(all.counts)
identical(p1.p2.b,all.counts)
head(p1.p2.b)
head(all.counts)
head(p1.p2)
head(p1.p2)
tt <- read.xlsx("CP1470.xlsx")
head(tt)
rm(tt)
rm(p1.p2.b)
CP1470.annot <- read.xlsx("CP1470.xlsx")
p1.p2.annot <- merge(CP1470.annot,p1.p2,by.x="Construct.Barcode",by.y="Construct.Barcode")
dim(p1.p2.annot)
p1.p2.annot <- merge(CP1470.annot,p1.p2,by.x="Construct.Barcode",by.y="Construct.Barcode",all=TRUE)
dim(p1.p2.annot)
colnames(p1.p2.annot)
colnames(all.counts)
p1.p2.annot <- merge(CP1470.annot,p1.p2,by.x="Construct.Barcode",by.y="Construct.Barcode",all=TRUE)
p1.p2.annot <- p1.p2.annot %>% dplyr::select(c(-Construct.IDs.x,-Category,-Construct.IDs.y))
p1.p2.annot <- p1.p2.annot %>% dplyr::rename(sgRNA=Construct.Barcode,Gene=TargetGeneSymbol)
colnames(all.counts)
colnames(p1.p2.annot)
head(all.counts)
head(p1.p2.annot)
p1.p2.annot <- merge(CP1470.annot,p1.p2,by.x="Construct.Barcode",by.y="Construct.Barcode",all=TRUE)
p1.p2.annot <- p1.p2.annot %>% dplyr::select(c(-Construct.Barcode,-Category,-Construct.IDs.y))
p1.p2.annot <- p1.p2.annot %>% dplyr::rename(sgRNA=Construct.IDs.x,Gene=TargetGeneSymbol)
head(p1.p2.annot)
p1.p2.annot <- merge(CP1470.annot,p1.p2,by.x="Construct.Barcode",by.y="Construct.Barcode",all=TRUE)
p1.p2.annot <- p1.p2.annot %>% dplyr::select(c(-Construct.Barcode,-Category,-Construct.IDs.y))
p1.p2.annot <- p1.p2.annot %>% dplyr::rename(sgRNA=Construct.IDs.x,Gene=TargetGeneSymbol)
p1.p2.annot <- p1.p2.annot %>% arrange(sgRNA)
all.counts <- read.xlsx("stockCounts.xlsx")
identical(all.counts,p1.p2.annot)
head(all.counts)
head(p1.p2.annot)
diff(all.counts,p1.p2.annot)
diff_data_frames(all.counts,p1.p2.annot)
write.xlsx(p1.p2.annot,file="p1.p2.annot_test.xlsx")
all.counts <- read.xlsx("stockCounts.xlsx")
p1 <- read.delim("../fromBroad/Plate1/counts-JD_GPP3297-Ramos_20220312_1.txt")
p2 <- read.delim("../fromBroad/Plate2/counts-JD_GPP3298-Ramos_20220312_2.txt")
p2.select <- p2 %>% dplyr::select(c(-Construct.IDs,-Unlabeled.Sample.Barcodes))
p1.p2 <- merge(p1,p2.select,by.x="Construct.Barcode",by.y="Construct.Barcode", all=TRUE)
CP1470.annot <- read.xlsx("CP1470.xlsx")
p1.p2.annot <- merge(CP1470.annot,p1.p2,by.x="Construct.Barcode",by.y="Construct.Barcode",all=TRUE)
p1.p2.annot <- p1.p2.annot %>% dplyr::select(c(-Construct.Barcode,-Category,-Construct.IDs.y))
p1.p2.annot <- p1.p2.annot %>% dplyr::rename(sgRNA=Construct.IDs.x,Gene=TargetGeneSymbol)
p1.p2.annot <- p1.p2.annot %>% arrange(sgRNA)
identical(all.counts,p1.p2.annot)
dim(all.counts)
dim(p1.p2.annot)
head(all.counts)
head(p1.p2.annot)
write.xlsx(p1.p2.annot,file="p1.p2.annot_test.xlsx")
all.counts <- read.xlsx("stockCounts.xlsx")
p1 <- read.delim("../fromBroad/Plate1/counts-JD_GPP3297-Ramos_20220312_1.txt")
p2 <- read.delim("../fromBroad/Plate2/counts-JD_GPP3298-Ramos_20220312_2.txt")
p2.select <- p2 %>% dplyr::select(c(-Construct.IDs,-Unlabeled.Sample.Barcodes))
p1.p2 <- merge(p1,p2.select,by.x="Construct.Barcode",by.y="Construct.Barcode", all=TRUE)
CP1470.annot <- read.xlsx("CP1470.xlsx")
p1.p2.annot <- merge(CP1470.annot,p1.p2,by.x="Construct.Barcode",by.y="Construct.Barcode",all=TRUE)
p1.p2.annot <- p1.p2.annot %>% dplyr::select(c(-Construct.Barcode,-Category,-Construct.IDs.y))
p1.p2.annot <- p1.p2.annot %>% dplyr::rename(sgRNA=Construct.IDs.x,Gene=TargetGeneSymbol)
p1.p2.annot <- p1.p2.annot %>% arrange(sgRNA)
identical(all.counts,p1.p2.annot)
write.xlsx(p1.p2.annot,file="p1.p2.annot_test.xlsx")
all.counts <- read.xlsx("stockCounts.xlsx")
p1 <- read.delim("../fromBroad/Plate1/counts-JD_GPP3297-Ramos_20220312_1.txt")
p2 <- read.delim("../fromBroad/Plate2/counts-JD_GPP3298-Ramos_20220312_2.txt")
p2.select <- p2 %>% dplyr::select(c(-Construct.IDs,-Unlabeled.Sample.Barcodes))
p1.p2 <- merge(p1,p2.select,by.x="Construct.Barcode",by.y="Construct.Barcode", all=TRUE)
CP1470.annot <- read.xlsx("CP1470.xlsx")
p1.p2.annot <- merge(CP1470.annot,p1.p2,by.x="Construct.Barcode",by.y="Construct.Barcode",all=TRUE)
p1.p2.annot <- p1.p2.annot %>% dplyr::select(c(-Construct.Barcode,-Category,-Construct.IDs.y))
p1.p2.annot <- p1.p2.annot %>% dplyr::rename(sgRNA=Construct.IDs.x,Gene=TargetGeneSymbol)
p1.p2.annot <- p1.p2.annot %>% arrange(sgRNA)
identical(all.counts,p1.p2.annot)
write.xlsx(p1.p2.annot,file="p1.p2.annot_test.xlsx")
all.counts <- read.xlsx("stockCounts.xlsx")
p1 <- read.delim("../fromBroad/Plate1/counts-JD_GPP3297-Ramos_20220312_1.txt")
p2 <- read.delim("../fromBroad/Plate2/counts-JD_GPP3298-Ramos_20220312_2.txt")
p2.select <- p2 %>% dplyr::select(c(-Construct.IDs,-Unlabeled.Sample.Barcodes))
p1.p2 <- merge(p1,p2.select,by.x="Construct.Barcode",by.y="Construct.Barcode", all=TRUE)
CP1470.annot <- read.xlsx("CP1470.xlsx")
p1.p2.annot <- merge(CP1470.annot,p1.p2,by.x="Construct.Barcode",by.y="Construct.Barcode",all=TRUE)
p1.p2.annot <- p1.p2.annot %>% dplyr::select(c(-Construct.Barcode,-Category,-Construct.IDs.y))
p1.p2.annot <- p1.p2.annot %>% dplyr::rename(sgRNA=Construct.IDs.x,Gene=TargetGeneSymbol)
p1.p2.annot <- p1.p2.annot %>% arrange(sgRNA)
identical(all.counts,p1.p2.annot)
dim(all.counts)
dim(p1.p2.annot)
write.xlsx(p1.p2.annot,file="p1.p2.annot_test.xlsx")
all.equal(all.counts,p1.p2.annot)
colnames(all.counts)
p1 <- read.delim("../fromBroad/Plate1/counts-JD_GPP3297-Ramos_20220312_1.txt")
p2 <- read.delim("../fromBroad/Plate2/counts-JD_GPP3298-Ramos_20220312_2.txt")
p2.select <- p2 %>% dplyr::select(c(-Construct.IDs,-Unlabeled.Sample.Barcodes))
p1.p2 <- merge(p1,p2.select,by.x="Construct.Barcode",by.y="Construct.Barcode", all=TRUE)
CP1470.annot <- read.xlsx("CP1470.xlsx")
p1.p2.annot <- merge(CP1470.annot,p1.p2,by.x="Construct.Barcode",by.y="Construct.Barcode",all=TRUE)
p1.p2.annot <- p1.p2.annot %>% dplyr::select(c(-Construct.Barcode,-Category,-Construct.IDs.y))
p1.p2.annot <- p1.p2.annot %>% dplyr::rename(sgRNA=Construct.IDs.x,Gene=TargetGeneSymbol)
p1.p2.annot <- p1.p2.annot %>% arrange(sgRNA)
all.counts <- p1.p2.annot
all.n <- read.table("batch.normalized.txt", row.names = 1, sep = "\t", header = TRUE)
all.n <- all.n %>% dplyr::select(-Gene)
all.n.l2 <- log((all.n+1),2)
colnames(all.n.l2)<-paste(colnames(all.n.l2),"l2",sep=".")
validation.n.l2 <- all.n.l2 %>% rename_at(vars(everything()), ~str_replace_all(., ".l2", ""))
validation.n.l2.reorder <- validation.n.l2 %>% dplyr::select(starts_with("pDNA") |
starts_with("Input") |
starts_with("ah") |
starts_with("am") |
starts_with("NoCAR") |
starts_with("AR"))
tt <- validation.n.l2.reorder[,c(1:23,25,27,29,31,33,35,37,39,41,43,45,24,26,28,30,32,34,36,38,40,42,44,46)]
validation.n.l2.reorder <- tt
validationBoxPlot <- ggplot(stack(validation.n.l2.reorder), aes(x = ind, y = values)) + geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + ggtitle("all samples log2 normalized")
validationBoxPlot
# Create an empty list to store the ggplot objects
PCAdata <- list()
PCAplots <- list()
# Read in sample annotations
AR.samps <- read_xlsx("AR_validation_conditions.xlsx")
# PCA of all samples together
plotTitle <- "All Validation Samples"
select.pca <- prcomp(t(validation.n.l2.reorder))
var <- select.pca$sdev^2
variance <- var/sum(var)
percentVar <- select.pca$sdev^2 / sum(select.pca$sdev^2 )
percentVar <- round(100 * percentVar,2)
select.pca$percentVar <- percentVar
select.pca$treatment <- AR.samps$treatment
select.pca$tissue <- AR.samps$tissue
select.pca$tissTreat <- paste0(AR.samps$tissue,".",AR.samps$treatment)
select.pca$samps <- colnames(validation.n.l2.reorder)
data <- as.data.frame(select.pca$x)
data$fill <- factor(select.pca$tissTreat)
plot <- ggplot(data, aes(x=PC1, y=PC2)) + geom_point(aes(fill = fill),shape=21, size = 4) + xlab(paste0("PC1 - ",select.pca$percentVar[1]," % of variability")) + ylab(paste0("PC2 - ",select.pca$percentVar[2]," % of variability")) + theme(legend.text = element_text(size = 8))
PCAdata[[plotTitle]] <- data
PCAplots[[plotTitle]] <- plot
# PCA of just in vitro
plotTitle <- "In vitro"
invitro.l2 <- validation.n.l2.reorder %>% dplyr::select(starts_with("pDNA") |
starts_with("Input") |
starts_with("ah") |
starts_with("am") |
starts_with("NoCAR"))
select.pca <- prcomp(t(invitro.l2))
var <- select.pca$sdev^2
variance <- var/sum(var)
percentVar <- select.pca$sdev^2 / sum(select.pca$sdev^2 )
percentVar <- round(100 * percentVar,2)
select.pca$percentVar <- percentVar
meta_df <- AR.samps %>% dplyr::filter(tissue == "inVitro") %>% dplyr::select(treatment)
select.pca$treatment <- meta_df$treatment
select.pca$samps <- colnames(invitro.l2)
data <- as.data.frame(select.pca$x)
data$fill <- factor(select.pca$treatment)
plot <- ggplot(data, aes(x=PC1, y=PC2)) + geom_point(aes(fill = fill),shape=21, size = 4) +
xlab(paste0("PC1 - ",select.pca$percentVar[1]," % of variability")) +
ylab(paste0("PC2 - ",select.pca$percentVar[2]," % of variability")) +
theme(legend.text = element_text(size = 8)) + ggtitle(plotTitle)
PCAdata[[plotTitle]] <- data
PCAplots[[plotTitle]] <- plot
# PCA of BM
plotTitle <- "BM Samples"
invitro.l2 <- validation.n.l2.reorder %>% dplyr::select(ends_with("BM"))
select.pca <- prcomp(t(invitro.l2))
var <- select.pca$sdev^2
variance <- var/sum(var)
percentVar <- select.pca$sdev^2 / sum(select.pca$sdev^2 )
percentVar <- round(100 * percentVar,2)
select.pca$percentVar <- percentVar
meta_df <- AR.samps %>% dplyr::filter(tissue == "BM") %>% dplyr::select(treatment)
select.pca$treatment <- meta_df$treatment
select.pca$samps <- colnames(invitro.l2)
data <- as.data.frame(select.pca$x)
data$fill <- factor(select.pca$treatment)
plot <- ggplot(data, aes(x=PC1, y=PC2)) + geom_point(aes(fill = fill),shape=21, size = 4) +
xlab(paste0("PC1 - ",select.pca$percentVar[1]," % of variability")) +
ylab(paste0("PC2 - ",select.pca$percentVar[2]," % of variability")) +
theme(legend.text = element_text(size = 8)) + ggtitle(plotTitle)
PCAdata[[plotTitle]] <- data
PCAplots[[plotTitle]] <- plot
# PCA of SP
plotTitle <- "SP Samples"
invitro.l2 <- validation.n.l2.reorder %>% dplyr::select(ends_with("SP"))
select.pca <- prcomp(t(invitro.l2))
var <- select.pca$sdev^2
variance <- var/sum(var)
percentVar <- select.pca$sdev^2 / sum(select.pca$sdev^2 )
percentVar <- round(100 * percentVar,2)
select.pca$percentVar <- percentVar
meta_df <- AR.samps %>% dplyr::filter(tissue == "SP") %>% dplyr::select(treatment)
select.pca$treatment <- meta_df$treatment
select.pca$samps <- colnames(invitro.l2)
data <- as.data.frame(select.pca$x)
data$fill <- factor(select.pca$treatment)
plot <- ggplot(data, aes(x=PC1, y=PC2)) + geom_point(aes(fill = fill),shape=21, size = 4) +
xlab(paste0("PC1 - ",select.pca$percentVar[1]," % of variability")) +
ylab(paste0("PC2 - ",select.pca$percentVar[2]," % of variability")) +
theme(legend.text = element_text(size = 8)) + ggtitle(plotTitle)
PCAdata[[plotTitle]] <- data
PCAplots[[plotTitle]] <- plot
#PCAplots[[1]]
pca.Together <- ggarrange(PCAplots[[2]],PCAplots[[3]],PCAplots[[4]], nrow=1,ncol=3)
pca.Together
#PCAplots[[1]]
pca.Together <- ggarrange(PCAplots[[2]],PCAplots[[3]],PCAplots[[4]], nrow=1,ncol=3)
pca.Together
ggarrange(validationBoxPlot,pca.Together,nrow=2,ncol=1)
for(i in 1:ncol(all.counts)) {
nn <- colnames(all.counts[i])
n30 <- sum(all.counts[,i] > 30)
print(paste(nn,n30))
}
all.iqr <- as.data.frame(sapply(all.n.l2, IQR))
all.med <- as.data.frame(sapply(all.n.l2, median))
all.0 <- as.data.frame(colSums(all.n.l2 == 0))
all.stats <- cbind(all.0,all.med,all.iqr)
write.xlsx(all.stats, file="all.stats.xlsx", overwrite = TRUE, rowNames=TRUE)
SP.10m <- SP_cd19.10m_v_egfr.15m.gdata
colnames(SP.10m) <- c("id","SP.10m.Score","SP.10m.FDR","SP.10m.negLogFDR","SP.10m.Rank")
SP.15m <- SP_cd19.15m_v_egfr.15m.gdata
colnames(SP.15m) <- c("id","SP.15m.Score","SP.15m.FDR","SP.15m.negLogFDR","SP.15m.Rank")
BM.10m <- BM_cd19.10m_v_egfr.15m.gdata
colnames(BM.10m) <- c("id","BM.10m.Score","BM.10m.FDR","BM.10m.negLogFDR","BM.10m.Rank")
BM.15m <- BM_cd19.15m_v_egfr.15m.gdata
colnames(BM.15m) <- c("id","BM.15m.Score","BM.15m.FDR","BM.15m.negLogFDR","BM.15m.Rank")
ET.1.2 <- cd19_1to2_v_egfr_1to2.gdata
colnames(ET.1.2) <- c("id","ET.1.2.Score","ET.1.2.FDR","ET.1.2.negLogFDR","ET.1.2.Rank")
ET.1.10 <- cd19_1to10_v_egfr_1to10.gdata
colnames(ET.1.10) <- c("id","ET.1.10.Score","ET.1.10.FDR","ET.1.10.negLogFDR","ET.1.10.Rank")
Mageck.combined <- merge(x=SP.10m, y=SP.15m, by.x=c("id"),by.y=c("id"), all=TRUE)
Mageck.combined <- merge(x=Mageck.combined,y=BM.10m, by.x=c("id"),by.y=c("id"), all=TRUE)
Mageck.combined <- merge(x=Mageck.combined,y=BM.15m, by.x=c("id"),by.y=c("id"), all=TRUE)
Mageck.combined <- merge(x=Mageck.combined,y=ET.1.2, by.x=c("id"),by.y=c("id"), all=TRUE)
Mageck.combined <- merge(x=Mageck.combined,y=ET.1.10, by.x=c("id"),by.y=c("id"), all=TRUE)
colnames(Mageck.combined)
dim(Mageck.combined)
SP.10m <- SP_cd19.10m_v_egfr.15m.gdata
colnames(SP.10m) <- c("id","SP.10m.Score","SP.10m.FDR","SP.10m.negLogFDR","SP.10m.Rank")
SP.15m <- SP_cd19.15m_v_egfr.15m.gdata
colnames(SP.15m) <- c("id","SP.15m.Score","SP.15m.FDR","SP.15m.negLogFDR","SP.15m.Rank")
BM.10m <- BM_cd19.10m_v_egfr.15m.gdata
colnames(BM.10m) <- c("id","BM.10m.Score","BM.10m.FDR","BM.10m.negLogFDR","BM.10m.Rank")
BM.15m <- BM_cd19.15m_v_egfr.15m.gdata
colnames(BM.15m) <- c("id","BM.15m.Score","BM.15m.FDR","BM.15m.negLogFDR","BM.15m.Rank")
ET.1.2 <- cd19_1to2_v_egfr_1to2.gdata
colnames(ET.1.2) <- c("id","ET.1.2.Score","ET.1.2.FDR","ET.1.2.negLogFDR","ET.1.2.Rank")
ET.1.10 <- cd19_1to10_v_egfr_1to10.gdata
colnames(ET.1.10) <- c("id","ET.1.10.Score","ET.1.10.FDR","ET.1.10.negLogFDR","ET.1.10.Rank")
Mageck.combined <- merge(x=SP.10m, y=SP.15m, by.x=c("id"),by.y=c("id"), all=TRUE)
Mageck.combined <- merge(x=Mageck.combined,y=BM.10m, by.x=c("id"),by.y=c("id"), all=TRUE)
Mageck.combined <- merge(x=Mageck.combined,y=BM.15m, by.x=c("id"),by.y=c("id"), all=TRUE)
Mageck.combined <- merge(x=Mageck.combined,y=ET.1.2, by.x=c("id"),by.y=c("id"), all=TRUE)
Mageck.combined <- merge(x=Mageck.combined,y=ET.1.10, by.x=c("id"),by.y=c("id"), all=TRUE)
write.xlsx(Mageck.combined, file="B-All_validationScreen_GeneLevel.xlsx")
sessionInfo()
writeLines(capture.output(sessionInfo()), "B-ALL_validationScreen_sessionInfo.txt")
